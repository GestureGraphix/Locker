generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ATHLETE
  COACH
}

enum CalendarSource {
  GOOGLE
  ICAL
  MANUAL
}

model Team {
  id        String   @id @default(uuid())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String             @id @default(uuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  role          Role               @default(ATHLETE)
  teamId        String?
  team          Team?              @relation(fields: [teamId], references: [id])
  hydrationScore Int               @default(0)
  accounts      Account[]
  sessions      Session[]
  calendarTokens GoogleCalendarToken?
  calendarEvents CalendarEvent[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Account {
  userId                 String
  type                   String
  provider               String
  providerAccountId      String
  refresh_token          String?  @db.Text
  access_token           String?  @db.Text
  expires_at             Int?
  token_type             String?
  scope                  String?
  id_token               String?  @db.Text
  session_state          String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GoogleCalendarToken {
  id                String   @id @default(uuid())
  userId            String
  calendarId        String   @default("primary")
  accessToken       String?  @db.Text
  refreshToken      String?  @db.Text
  expiryDate        DateTime?
  syncToken         String?  @db.Text
  watchChannelId    String?
  watchResourceId   String?
  watchExpiration   DateTime?
  lastSyncedAt      DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, calendarId])
}

model CalendarEvent {
  id          String          @id @default(uuid())
  userId      String
  title       String
  description String?
  location    String?
  start       DateTime
  """Normalized UTC end time"""
  end         DateTime
  source      CalendarSource
  externalId  String?
  uid         String?
  dtStart     DateTime?
  raw         Json?
  lastUpdated DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, start])
  @@unique([userId, externalId])
  @@unique([userId, uid, dtStart])
}
