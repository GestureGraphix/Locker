generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ATHLETE
  COACH
  ADMIN
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String?
  role               Role                 @default(ATHLETE)
  passwordCredential PasswordCredentials?
  athleteProfile     AthleteProfile?
  academics          Academics?
  sessionTokens      SessionToken[]
  mealLogs           MealLog[]
  academicCourses    AcademicCourse[]
  academicItems      AcademicItem[]

  @@map("users")
}

model PasswordCredentials {
  userId       Int    @id
  passwordHash String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_credentials")
}

model AthleteProfile {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport          String?
  level          String?
  team           String?
  position       String?
  coachEmail     String?
  heightCm       Float?
  weightKg       Float?
  allergies      String[] @default([])
  tags           String[] @default([])
  phone          String?
  location       String?
  university     String?
  graduationYear String?
  notes          String?
  nutritionGoals Json?

  @@map("athlete_profiles")
}

model Academics {
  userId  Int  @id
  payload Json
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("academics")
}

enum AcademicItemType {
  assignment
  exam
  reading
  essay
  calendar
}

model AcademicCourse {
  userId    Int
  id        Int
  code      String
  name      String
  professor String
  schedule  String?
  source    String   @default("manual")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     AcademicItem[] @relation("CourseItems")

  @@id([userId, id])
  @@map("academic_courses")
  @@index([userId, code])
}

model AcademicItem {
  userId      Int
  id          Int
  courseId    Int?
  courseLabel String
  type        AcademicItemType
  title       String
  dueAt       DateTime
  notes       String?
  completed   Boolean           @default(false)
  source      String            @default("manual")
  externalId  String?
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      AcademicCourse?   @relation("CourseItems", fields: [userId, courseId], references: [userId, id], onDelete: SetNull)

  @@id([userId, id])
  @@map("academic_items")
  @@index([userId, dueAt])
  @@index([userId, courseId])
}

model SessionToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session_tokens")
}

model MealLog {
  userId         Int
  id             Int
  dateTime       DateTime
  mealType       String
  calories       Int
  proteinGrams   Float
  notes          String?
  completed      Boolean  @default(false)
  nutritionFacts Json
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, id])
  @@map("meal_logs")
}
