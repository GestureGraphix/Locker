generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ATHLETE
  COACH
  ADMIN
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String?
  role               Role                 @default(ATHLETE)
  passwordCredential PasswordCredentials?
  athleteProfile     AthleteProfile?
  academics          Academics?
  sessionTokens      SessionToken[]
  mealLogs           MealLog[]
  hydrationLogs      HydrationLog[]

  @@map("users")
}

model PasswordCredentials {
  userId       Int    @id
  passwordHash String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_credentials")
}

model AthleteProfile {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sport          String?
  level          String?
  team           String?
  position       String?
  coachEmail     String?
  heightCm       Float?
  weightKg       Float?
  allergies      String[] @default([])
  tags           String[] @default([])
  phone          String?
  location       String?
  university     String?
  graduationYear String?
  notes          String?
  nutritionGoals Json?

  @@map("athlete_profiles")
}

model Academics {
  userId  Int  @id
  payload Json
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("academics")
}

model SessionToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session_tokens")
}

model MealLog {
  userId         Int
  id             Int
  dateTime       DateTime
  mealType       String
  calories       Int
  proteinGrams   Float
  notes          String?
  completed      Boolean  @default(false)
  nutritionFacts Json
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, id])
  @@map("meal_logs")
}

model HydrationLog {
  userId Int
  id     Int
  date   DateTime
  ounces Int
  source String
  time   String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, id])
  @@map("hydration_logs")
}
